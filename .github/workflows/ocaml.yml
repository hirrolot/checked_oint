name: OCaml CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  HTML_DOCS_DIR: _build/default/_doc/_html

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install system packages
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt install bubblewrap
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install gpatch
        else
          echo "$RUNNER_OS is not supported!"
          exit 1
        fi
      shell: bash

    - name: Install Opam
      run: |
        echo "" | bash -c "sh <(curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)"

    - name: Cache Opam
      id: cache-opam
      uses: actions/cache@v4
      with:
        path: ~/.opam
        key: ${{ runner.os }}-${{ hashFiles('**.opam') }}

    - name: Initialize Opam
      if: steps.cache-opam.outputs.cache-hit != 'true'
      # Disabling sandboxing because it does not work on some versions of Ubuntu.
      run: opam init --auto-setup --disable-sandboxing -y

    - name: Install the dependencies
      if: steps.cache-opam.outputs.cache-hit != 'true'
      run: |
        opam install . --deps-only --with-test -y
        opam install ocamlformat odoc -y

    - name: Check formatting
      run: opam exec -- dune build @fmt --action-stderr-on-success=must-be-empty

    - name: Test
      run: opam exec ./scripts/test.sh

    - name: Compile with Clang
      run: opam exec ./scripts/test-clang.sh

    - name: Generate documentation
      if: matrix.os == 'ubuntu-latest'
      run: opam exec dune build @doc

    - name: Upload documentation artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: html-docs
        path: ${{ env.HTML_DOCS_DIR }}

  deploy-docs:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Download documentation artifact
      uses: actions/download-artifact@v4
      with:
        name: html-docs
        path: ${{ env.HTML_DOCS_DIR }}

    - name: Deploy documentation
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages
        folder: ${{ env.HTML_DOCS_DIR }}
